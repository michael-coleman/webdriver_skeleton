// vim: foldmethod=syntax
 
var assert = require('assert');
 
//var chai = require('chai'); 
var expect = require('chai').expect; 
// var chai_as_promised = require('chai-as-promised'); 
// var should = chai.should();
// chai.use(chai_as_promised);
 
 
var DemoFormPage = require('./DemoForm.po.js');
var demo_form = new DemoFormPage();

describe('Helix Demo Form Page', function() {
	 
	before(function(done) {
		 
		// create new driver instance, which will be available on the new
		// page object as this.driver
		demo_form.new_driver()
		.then(function() {
			return demo_form.driver.manage().window().setSize(1200, 500);
		})
		.then(function() {
			return demo_form.driver.manage().window().setPosition(0, 0);
		})
		.then(function() {
			done();
		});
	}); 
	 
	after(function(done) {
		
		demo_form.driver.quit();
		done();
	});
	 
	afterEach(function(done) {
		// re-request the page so each test has the plain page  and not any
		// residual state from the previous tests
		demo_form.driver.get(demo_form.config.host +
			                             'helix/public/demos/demo_form.php')
		.then(function() {
			done();
		});
	});
	
	it('should simply load the correct page when its URL is requested', 
		                                                    function(done) {
		
		demo_form.get(demo_form.config.host +
			                              'helix/public/demos/demo_form.php')
			.then(() =>  demo_form.get_h1_text() )
			.then((h1_text) => {
				 
				/** check page content by simply checking that the page content
				 * contains the correct title - yes its a bit of an
				 * oversimplification. However the remaining tests which all
				 * occur on this page with only serve as additional
				 * confirmations that the page exists.
				 */
				expect(h1_text).to.equal('Demo form'); 
			})
			.then(done, done);
	});
	 
	it('gives validation error if form submitted with empty email field', 
		                                                   function(done) {
		demo_form.submit_form()
			.then(() => demo_form.get_email_validation_error_message() )
			.then((message) => {
				expect(message).to.equal('please complete this');
			})
			.then(done, done);
	});
	 
	it('advises user to fix email field if they submit a bad email address', 
		                                                     function(done) {
		
		/** 
		 * .then(done, done);
		 * ------------------
		 * If you write an assertion in this style:
		 *  
		 *  .then(function(message) {
		 *  	expect(message).to.equal('please complete this');
		 *  	done();
		 *  });
		 *  
		 * And the assertion fails, the entire test will error out at the
		 * assertion with something like:
		 *
		 *    (node:9661) UnhandledPromiseRejectionWarning:
		 *                     Unhandled promise rejection (rejection id: 1):
		 *    ...
		 *  
		 * It seems mocha wraps the tests in a try/catch, for catching your
		 * errors (assuming they are assertion error/failures).
		 * So when the assertion errors out the "try" block swallows the error
		 * and mocha carries on - business as usual, but because the `done()`
		 * is never reached mocha still considers your test to be running,
		 * then mocha's test-case --timeout is reached.
		 * 
		 * you get basically unhandled promise rejection warnings and mocha
		 * timeout errors, but you don't actually get any of chai's assertion
		 * error messages/explations.
		 * 
		 * The assertion's then(), is like an executor for a new - kind of -
		 * ad hod promise generated by the then(), where the outcome of the
		 * assertion code/callback is taken for the resolution or rejection
		 * of this adhoc promise.
		 * by chaining another .then() on the adhoc promise of the assertion's
		 * then(), the callbacks passed will be called in both the cases of
		 * the assertion succeeding, or erroring, (i.e. resolution or
		 * rejection)
		 * 
		 *  
		 * for more info see:
		 * https://wietse.loves.engineering/testing-promises-with-mocha-90df8b7d2e35
		 * https://stackoverflow.com/a/39718611/4668401
		 * http://jamesknelson.com/are-es6-promises-swallowing-your-errors/
		 */
		
		// assumes the browser is still on this demo form page
		demo_form.get_email_input_field()
			.then(email_input => email_input.sendKeys('bigrudy73@') )
			.then(() => demo_form.submit_form() )
			.then(() => demo_form.try_get_email_input_with_invalid_state())
			.then((invalid_email_input) => {
				expect(invalid_email_input, 'topic [invalid_email_input]')
					                                               .to.exist;
			})
			.then(done, done);
	});
	
});
